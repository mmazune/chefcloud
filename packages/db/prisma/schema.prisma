// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ===== Enums =====

enum RoleLevel {
  L1 // Waiter
  L2 // Cashier/Supervisor
  L3 // Chef/Stock
  L4 // Manager/Accountant
  L5 // Owner/Admin
}

enum TableStatus {
  AVAILABLE
  OCCUPIED
  RESERVED
  CLEANING
}

enum ReservationStatus {
  HELD
  CONFIRMED
  SEATED
  CANCELLED
}

enum ItemType {
  FOOD
  DRINK
}

enum OrderStatus {
  NEW
  SENT
  IN_KITCHEN
  READY
  SERVED
  VOIDED
  CLOSED
}

enum SubscriptionStatus {
  ACTIVE
  GRACE
  PAST_DUE
  CANCELLED
}

enum SubscriptionEventType {
  RENEWAL_DUE
  RENEWED
  PAST_DUE
  CANCELLED
}

enum ServiceType {
  DINE_IN
  TAKEAWAY
}

enum StationTag {
  GRILL
  FRYER
  BAR
  OTHER
}

enum PaymentMethod {
  CASH
  CARD
  MOMO
}

enum BadgeState {
  ACTIVE
  REVOKED
  LOST
  RETURNED
}

enum ProcurementStrategy {
  SAFETY_STOCK
  FORECAST
}

enum ProcurementJobStatus {
  DRAFT
  APPROVED
  PLACED
}

enum PromotionEffectType {
  PERCENT_OFF
  FIXED_OFF
  HAPPY_HOUR
  BUNDLE
}

enum CashMovementType {
  PAID_IN
  PAID_OUT
  SAFE_DROP
  PICKUP
}

enum AccountType {
  ASSET
  LIABILITY
  EQUITY
  REVENUE
  COGS
  EXPENSE
}

enum PaymentTerms {
  NET7
  NET14
  NET30
}

enum BillStatus {
  DRAFT
  OPEN
  PAID
  VOID
}

enum InvoiceStatus {
  OPEN
  PAID
  VOID
}

enum ReminderType {
  VENDOR_BILL
  UTILITY
}

enum ReminderChannel {
  EMAIL
  SLACK
}

enum EventBookingStatus {
  HELD
  CONFIRMED
  CANCELLED
}

enum LeaveType {
  ANNUAL
  SICK
  UNPAID
  OTHER
}

enum LeaveRequestStatus {
  PENDING
  APPROVED
  REJECTED
  CANCELLED
}

enum ShiftSwapStatus {
  PENDING
  APPROVED
  REJECTED
  CANCELLED
}

enum TimeClockMethod {
  MSR
  PASSKEY
  PASSWORD
}

// ===== Organization & Multi-tenancy =====

model Org {
  id        String   @id @default(cuid())
  name      String
  slug      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  branches         Branch[]
  users            User[]
  settings         OrgSettings?
  devices          Device[]
  floorPlans       FloorPlan[]
  taxCategories    TaxCategory[]
  modifierGroups   ModifierGroup[]
  anomalyEvents    AnomalyEvent[]
  alertChannels    AlertChannel[]
  scheduledAlerts  ScheduledAlert[]
  reservations     Reservation[]
  supportSessions  SupportSession[]
  spoutDevices     SpoutDevice[]
  spoutEvents      SpoutEvent[]
  ownerDigests     OwnerDigest[]
  apiKeys          ApiKey[]
  subscription     OrgSubscription?
  branchBudgets    BranchBudget[]
  forecastProfiles ForecastProfile[]
  forecastPoints   ForecastPoint[]
  franchiseRanks   FranchiseRank[]
  badgeAssets      BadgeAsset[]

  @@map("orgs")
}

model OrgSettings {
  id                        String   @id @default(cuid())
  orgId                     String   @unique
  vatPercent                Decimal  @default(18.00) @db.Decimal(5, 2)
  currency                  String   @default("UGX")
  discountApprovalThreshold Decimal  @default(5000) @db.Decimal(10, 2)
  reservationHoldMinutes    Int      @default(30)
  receiptFooter             String?
  metadata                  Json?
  anomalyThresholds         Json?    // { lateVoidMin: 5, heavyDiscountUGX: 5000, noDrinksWarnRate: 0.25 }
  platformAccess            Json?    // { "ROLE_NAME": { "desktop": bool, "web": bool, "mobile": bool }, ... }
  franchiseWeights          Json?    // { revenue: 0.4, margin: 0.3, waste: -0.2, sla: 0.1 }
  showCostToChef            Boolean  @default(false)
  defaults                  Json?    // Accounting defaults: { coaVersion: "v1", lockBackdate: false }
  baseCurrencyCode          String?  // E39-s1: Base currency for accounting (falls back to currency field)
  taxMatrix                 Json?    // E39-s1: { defaultTax: {code:"VAT_STD", rate:0.18, inclusive:true}, alcohol: {rate:0.15}, serviceCharge: {rate:0.1, inclusive:false} }
  rounding                  Json?    // E39-s1: { cashRounding:"NEAREST_50", taxRounding:"HALF_UP" }
  bookingPolicies           Json?    // E42-s1: { holdMinutes:30, allowPartial:true, creditExpiryHours:12 }
  attendance                Json?    // E43-s1: { autoClockInOnMsr:true, overtimeAfterMinutes:480, hardCapAbsences:3 }
  inventoryTolerance        Json?    // E45-s1: { pct: 0.05, absolute: 0 } - variance tolerance for stock counts
  createdAt                 DateTime @default(now())
  updatedAt                 DateTime @updatedAt

  org Org @relation(fields: [orgId], references: [id], onDelete: Cascade)

  @@map("org_settings")
}

model Branch {
  id           String   @id @default(cuid())
  orgId        String
  name         String
  address      String?
  timezone     String   @default("Africa/Kampala")
  currencyCode String?  // E39-s1: Branch-specific currency (falls back to org base)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  org            Org             @relation(fields: [orgId], references: [id], onDelete: Cascade)
  tables         Table[]
  orders         Order[]
  auditEvents    AuditEvent[]
  menuItems      MenuItem[]
  categories     Category[]
  users          User[]
  devices        Device[]
  shifts         Shift[]
  tillSessions   TillSession[]
  stockBatches   StockBatch[]
  purchaseOrders PurchaseOrder[]
  goodsReceipts  GoodsReceipt[]
  wastageRecords Wastage[]
  anomalyEvents  AnomalyEvent[]
  reservations   Reservation[]
  spoutDevices   SpoutDevice[]
  spoutEvents    SpoutEvent[]
  adjustments    Adjustment[]
  branchBudgets  BranchBudget[]
  forecastProfiles ForecastProfile[]
  forecastPoints ForecastPoint[]
  franchiseRanks FranchiseRank[]

  @@index([orgId, id])
  @@map("branches")
}

// ===== Users & Authentication =====

model User {
  id           String    @id @default(cuid())
  orgId        String
  branchId     String?
  email        String    @unique
  passwordHash String?
  pinHash      String?
  firstName    String
  lastName     String
  roleLevel    RoleLevel @default(L1)
  isActive     Boolean   @default(true)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  org                 Org                  @relation(fields: [orgId], references: [id], onDelete: Cascade)
  branch              Branch?              @relation(fields: [branchId], references: [id], onDelete: SetNull)
  roles               Role[]
  orders              Order[]
  auditEvents         AuditEvent[]
  employeeProfile     EmployeeProfile?
  sessions            Session[]
  openedShifts        Shift[]              @relation("ShiftOpenedBy")
  closedShifts        Shift[]              @relation("ShiftClosedBy")
  openedTillSessions  TillSession[]        @relation("TillSessionOpenedBy")
  closedTillSessions  TillSession[]        @relation("TillSessionClosedBy")
  cashMovements       CashMovement[]       @relation("CashMovementCreatedBy")
  discounts           Discount[]           @relation("DiscountCreatedBy")
  approvedDiscounts   Discount[]           @relation("DiscountApprovedBy")
  createdRefunds      Refund[]             @relation("CreatedRefunds")
  approvedRefunds     Refund[]             @relation("ApprovedRefunds")
  webAuthnCredentials WebAuthnCredential[]
  anomalyEvents       AnomalyEvent[]
  supportSessions     SupportSession[]
  assignedBadges      BadgeAsset[]
  procurementJobs     ProcurementJob[]
  approvedPromotions  Promotion[]          @relation("PromotionApprovals")
  leaveRequests       LeaveRequest[]
  approvedLeaves      LeaveRequest[]       @relation("ApprovedLeave")
  dutyShifts          DutyShift[]
  assignedDutyShifts  DutyShift[]          @relation("AssignedShifts")
  swapsFrom           ShiftSwap[]          @relation("SwapFrom")
  swapsTo             ShiftSwap[]          @relation("SwapTo")
  approvedSwaps       ShiftSwap[]          @relation("ApprovedSwaps")
  timeEntries         TimeEntry[]
  approvedTimeEntries TimeEntry[]          @relation("ApprovedTimeEntries")
  stockCounts         StockCount[]         // E45-s1: Stock counts performed by user

  @@index([orgId, id])
  @@map("users")
}

model EmployeeProfile {
  id           String   @id @default(cuid())
  userId       String   @unique
  employeeCode String   @unique
  badgeId      String?  @unique
  badgeCode    String?  // Optional reference to BadgeAsset.code (soft link for legacy)
  metadata     Json?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("employee_profiles")
}

model BadgeAsset {
  id             String     @id @default(cuid())
  orgId          String
  code           String     @unique
  state          BadgeState @default(ACTIVE)
  assignedUserId String?
  lastUsedAt     DateTime?
  custody        Json?      // Audit trail: [{ assignedTo, assignedAt, returnedAt }]
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt

  org          Org   @relation(fields: [orgId], references: [id], onDelete: Cascade)
  assignedUser User? @relation(fields: [assignedUserId], references: [id], onDelete: SetNull)

  @@index([orgId])
  @@index([assignedUserId])
  @@map("badge_assets")
}

model Device {
  id        String   @id @default(cuid())
  orgId     String
  branchId  String
  name      String
  deviceKey String   @unique
  isActive  Boolean  @default(true)
  metadata  Json?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  org      Org       @relation(fields: [orgId], references: [id], onDelete: Cascade)
  branch   Branch    @relation(fields: [branchId], references: [id], onDelete: Cascade)
  sessions Session[]

  @@index([orgId, id])
  @@map("devices")
}

model Session {
  id        String   @id @default(cuid())
  userId    String
  deviceId  String?
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())

  user   User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  device Device? @relation(fields: [deviceId], references: [id], onDelete: SetNull)

  @@index([userId])
  @@index([expiresAt])
  @@map("sessions")
}

model WebAuthnCredential {
  id           String   @id @default(cuid())
  userId       String
  credentialId String   @unique // base64url encoded
  publicKey    Bytes
  counter      Int      @default(0)
  deviceType   String // "singleDevice" or "multiDevice"
  backedUp     Boolean  @default(false)
  transports   String[] // ["usb", "nfc", "ble", "internal"]
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("webauthn_credentials")
}

model FloorPlan {
  id        String   @id @default(cuid())
  orgId     String
  name      String
  data      Json
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  org          Org           @relation(fields: [orgId], references: [id], onDelete: Cascade)
  tables       Table[]
  reservations Reservation[]

  @@index([orgId, id])
  @@map("floor_plans")
}

model Role {
  id          String   @id @default(cuid())
  name        String
  description String?
  level       Int      @default(1) // L1-L5
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  users       User[]
  permissions Permission[]

  @@map("roles")
}

model Permission {
  id         String   @id @default(cuid())
  resource   String // e.g., "orders", "inventory", "reports"
  action     String // e.g., "read", "create", "update", "delete"
  conditions Json? // ABAC conditions
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  roles Role[]

  @@unique([resource, action])
  @@map("permissions")
}

// ===== Floor & Tables =====

model Table {
  id          String      @id @default(cuid())
  orgId       String
  branchId    String
  floorPlanId String?
  label       String
  capacity    Int         @default(4)
  status      TableStatus @default(AVAILABLE)
  isActive    Boolean     @default(true)
  metadata    Json? // floor plan position, shape, etc.
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  branch       Branch        @relation(fields: [branchId], references: [id], onDelete: Cascade)
  floorPlan    FloorPlan?    @relation(fields: [floorPlanId], references: [id], onDelete: SetNull)
  orders       Order[]
  reservations Reservation[]

  @@unique([branchId, label])
  @@index([orgId, id])
  @@map("tables")
}

model Reservation {
  id               String            @id @default(cuid())
  orgId            String
  branchId         String
  floorPlanId      String?
  tableId          String?
  name             String
  phone            String?
  partySize        Int
  startAt          DateTime
  endAt            DateTime
  status           ReservationStatus @default(HELD)
  deposit          Decimal           @default(0) @db.Decimal(10, 2)
  depositStatus    String            @default("NONE") // "NONE" | "HELD" | "CAPTURED" | "REFUNDED"
  paymentIntentId  String?
  reminderSentAt   DateTime?
  autoCancelAt     DateTime?
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt

  org            Org                     @relation(fields: [orgId], references: [id], onDelete: Cascade)
  branch         Branch                  @relation(fields: [branchId], references: [id], onDelete: Cascade)
  floorPlan      FloorPlan?              @relation(fields: [floorPlanId], references: [id], onDelete: SetNull)
  table          Table?                  @relation(fields: [tableId], references: [id], onDelete: SetNull)
  paymentIntent  PaymentIntent?          @relation(fields: [paymentIntentId], references: [id], onDelete: SetNull)
  reminders      ReservationReminder[]

  @@index([orgId])
  @@index([branchId])
  @@index([tableId, startAt, endAt])
  @@index([autoCancelAt])
  @@map("reservations")
}

model ReservationReminder {
  id            String    @id @default(cuid())
  reservationId String
  channel       String // "SMS" | "EMAIL"
  target        String // phone number or email
  scheduledAt   DateTime
  sentAt        DateTime?
  createdAt     DateTime  @default(now())

  reservation Reservation @relation(fields: [reservationId], references: [id], onDelete: Cascade)

  @@index([scheduledAt, sentAt])
  @@map("reservation_reminders")
}

// ===== Menu =====

model Category {
  id        String   @id @default(cuid())
  branchId  String
  name      String
  sortOrder Int      @default(0)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  branch    Branch     @relation(fields: [branchId], references: [id], onDelete: Cascade)
  menuItems MenuItem[]

  @@index([branchId])
  @@map("categories")
}

model MenuItem {
  id            String     @id @default(cuid())
  branchId      String
  categoryId    String?
  name          String
  description   String?
  itemType      ItemType
  station       StationTag @default(OTHER)
  price         Decimal    @db.Decimal(10, 2)
  taxCategoryId String?
  isAvailable   Boolean    @default(true)
  metadata      Json? // variations, etc.
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt

  branch            Branch             @relation(fields: [branchId], references: [id], onDelete: Cascade)
  category          Category?          @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  taxCategory       TaxCategory?       @relation(fields: [taxCategoryId], references: [id], onDelete: SetNull)
  orderItems        OrderItem[]
  modifierGroups    MenuItemOnGroup[]
  recipeIngredients RecipeIngredient[]

  @@index([branchId])
  @@map("menu_items")
}

model TaxCategory {
  id            String   @id @default(cuid())
  orgId         String
  name          String
  rate          Decimal  @db.Decimal(5, 2)
  efirsTaxCode  String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  org       Org        @relation(fields: [orgId], references: [id], onDelete: Cascade)
  menuItems MenuItem[]

  @@map("tax_categories")
}

model ModifierGroup {
  id        String   @id @default(cuid())
  orgId     String
  name      String
  min       Int      @default(0)
  max       Int      @default(0)
  required  Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  org       Org               @relation(fields: [orgId], references: [id], onDelete: Cascade)
  options   ModifierOption[]
  menuItems MenuItemOnGroup[]

  @@map("modifier_groups")
}

model ModifierOption {
  id         String   @id @default(cuid())
  groupId    String
  name       String
  priceDelta Decimal  @db.Decimal(10, 2)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  group             ModifierGroup      @relation(fields: [groupId], references: [id], onDelete: Cascade)
  recipeIngredients RecipeIngredient[]

  @@map("modifier_options")
}

model MenuItemOnGroup {
  id      String @id @default(cuid())
  itemId  String
  groupId String

  item  MenuItem      @relation(fields: [itemId], references: [id], onDelete: Cascade)
  group ModifierGroup @relation(fields: [groupId], references: [id], onDelete: Cascade)

  @@unique([itemId, groupId])
  @@map("menu_item_on_group")
}

// ===== Orders =====

model Order {
  id           String      @id @default(cuid())
  branchId     String
  tableId      String?
  userId       String
  orderNumber  String
  status       OrderStatus @default(NEW)
  serviceType  ServiceType @default(DINE_IN)
  subtotal     Decimal     @default(0) @db.Decimal(12, 2)
  tax          Decimal     @default(0) @db.Decimal(12, 2)
  discount     Decimal     @default(0) @db.Decimal(10, 2)
  total        Decimal     @default(0) @db.Decimal(12, 2)
  anomalyFlags String[]
  metadata     Json?
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt

  branch     Branch      @relation(fields: [branchId], references: [id], onDelete: Cascade)
  table      Table?      @relation(fields: [tableId], references: [id], onDelete: SetNull)
  user       User        @relation(fields: [userId], references: [id], onDelete: Restrict)
  orderItems OrderItem[]
  payments   Payment[]
  refunds    Refund[]
  kdsTickets KdsTicket[]
  discounts  Discount[]

  @@unique([branchId, orderNumber])
  @@index([branchId])
  @@map("orders")
}

model KdsTicket {
  id        String     @id @default(cuid())
  orderId   String
  station   StationTag
  status    String     @default("QUEUED")
  createdAt DateTime   @default(now())
  readyAt   DateTime?

  order Order @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@map("kds_tickets")
}

model Shift {
  id           String    @id @default(cuid())
  orgId        String
  branchId     String
  openedById   String
  closedById   String?
  openedAt     DateTime  @default(now())
  closedAt     DateTime?
  openingFloat Decimal   @default(0) @db.Decimal(10, 2)
  declaredCash Decimal?  @db.Decimal(10, 2)
  overShort    Decimal?  @db.Decimal(10, 2)
  notes        String?
  metadata     Json?

  branch       Branch        @relation(fields: [branchId], references: [id], onDelete: Cascade)
  openedBy     User          @relation("ShiftOpenedBy", fields: [openedById], references: [id], onDelete: Restrict)
  closedBy     User?         @relation("ShiftClosedBy", fields: [closedById], references: [id], onDelete: Restrict)
  tillSessions TillSession[]
  stockCounts  StockCount[]  // E45-s1: Stock counts for this shift

  @@index([branchId, openedAt])
  @@map("shifts")
}

// E45-s1: Stock count gate at shift close
model StockCount {
  id          String   @id @default(cuid())
  orgId       String
  branchId    String
  shiftId     String
  countedAt   DateTime @default(now())
  countedById String
  notes       String?
  lines       Json     // [{ itemId, countedQty }]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  shift     Shift @relation(fields: [shiftId], references: [id], onDelete: Cascade)
  countedBy User  @relation(fields: [countedById], references: [id], onDelete: Restrict)

  @@index([orgId, branchId, countedAt])
  @@index([shiftId])
  @@map("stock_counts")
}

model TillSession {
  id            String    @id @default(cuid())
  orgId         String
  branchId      String
  drawerId      String // Identifier for cash drawer (e.g., "DRAWER-1", "REGISTER-A")
  openedById    String
  closedById    String?
  openingFloat  Decimal   @db.Decimal(10, 2)
  closingCount  Decimal?  @db.Decimal(10, 2) // Total cash counted at close
  variance      Decimal?  @db.Decimal(10, 2) // Difference between expected and counted
  openedAt      DateTime  @default(now())
  closedAt      DateTime?
  shiftId       String? // Optional link to shift
  metadata      Json?

  branch        Branch         @relation(fields: [branchId], references: [id], onDelete: Cascade)
  openedBy      User           @relation("TillSessionOpenedBy", fields: [openedById], references: [id], onDelete: Restrict)
  closedBy      User?          @relation("TillSessionClosedBy", fields: [closedById], references: [id], onDelete: Restrict)
  shift         Shift?         @relation(fields: [shiftId], references: [id], onDelete: SetNull)
  cashMovements CashMovement[]

  @@index([orgId, branchId])
  @@index([branchId, drawerId, closedAt])
  @@map("till_sessions")
}

model CashMovement {
  id            String           @id @default(cuid())
  orgId         String
  branchId      String
  tillSessionId String
  type          CashMovementType
  amount        Decimal          @db.Decimal(10, 2)
  reason        String?
  createdById   String
  createdAt     DateTime         @default(now())
  metadata      Json?

  tillSession TillSession @relation(fields: [tillSessionId], references: [id], onDelete: Cascade)
  createdBy   User        @relation("CashMovementCreatedBy", fields: [createdById], references: [id], onDelete: Restrict)

  @@index([tillSessionId])
  @@index([orgId, branchId, createdAt])
  @@map("cash_movements")
}

model Discount {
  id           String   @id @default(cuid())
  orgId        String
  orderId      String
  createdById  String
  type         String // percentage, fixed
  value        Decimal  @db.Decimal(10, 2)
  approvedById String?
  createdAt    DateTime @default(now())
  metadata     Json?

  order      Order @relation(fields: [orderId], references: [id], onDelete: Cascade)
  createdBy  User  @relation("DiscountCreatedBy", fields: [createdById], references: [id], onDelete: Restrict)
  approvedBy User? @relation("DiscountApprovedBy", fields: [approvedById], references: [id], onDelete: Restrict)

  @@index([orderId])
  @@map("discounts")
}

model OrderItem {
  id          String   @id @default(cuid())
  orderId     String
  menuItemId  String
  quantity    Int      @default(1)
  price       Decimal  @db.Decimal(10, 2)
  subtotal    Decimal  @db.Decimal(10, 2)
  notes       String?
  metadata    Json? // modifiers, special instructions
  costUnit    Decimal? @db.Decimal(10, 2) // UGX cost per unit
  costTotal   Decimal? @db.Decimal(10, 2)
  marginTotal Decimal? @db.Decimal(10, 2)
  marginPct   Decimal? @db.Decimal(5, 2) // percentage
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  order    Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  menuItem MenuItem @relation(fields: [menuItemId], references: [id], onDelete: Restrict)

  @@map("order_items")
}

// ===== Payments =====

model Payment {
  id            String        @id @default(cuid())
  orderId       String
  amount        Decimal       @db.Decimal(10, 2)
  method        PaymentMethod
  status        String        @default("pending") // pending, completed, failed, refunded
  transactionId String?
  metadata      Json?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  order   Order     @relation(fields: [orderId], references: [id], onDelete: Cascade)
  refunds Refund[]

  @@map("payments")
}

model Refund {
  id          String   @id @default(cuid())
  orderId     String
  paymentId   String
  provider    String // "MOMO" | "CASH" | "CARD" | "MANUAL"
  amount      Decimal  @db.Decimal(10, 2)
  reason      String
  status      String   @default("PENDING") // "PENDING" | "COMPLETED" | "FAILED"
  createdById String
  approvedById String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  order      Order @relation(fields: [orderId], references: [id], onDelete: Cascade)
  payment    Payment @relation(fields: [paymentId], references: [id])
  createdBy  User  @relation("CreatedRefunds", fields: [createdById], references: [id])
  approvedBy User? @relation("ApprovedRefunds", fields: [approvedById], references: [id])

  @@index([orderId])
  @@index([status, createdAt])
  @@map("refunds")
}


model PaymentIntent {
  id           String        @id @default(cuid())
  orgId        String
  branchId     String
  orderId      String
  provider     String // "MTN" | "AIRTEL" | "MOMO"
  amount       Decimal       @db.Decimal(12, 2)
  currency     String        @default("UGX")
  status       String        @default("PENDING") // "PENDING" | "REQUIRES_ACTION" | "SUCCEEDED" | "FAILED" | "CANCELLED"
  providerRef  String?
  metadata     Json?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt

  reservations Reservation[]

  @@index([orgId, orderId])
  @@index([status, createdAt])
  @@map("payment_intents")
}

model WebhookEvent {
  id        String   @id @default(cuid())
  provider  String // "MTN" | "AIRTEL"
  eventType String
  raw       Json
  verified  Boolean  @default(false)
  receivedAt DateTime @default(now())

  @@index([provider, receivedAt])
  @@map("webhook_events")
}

model FiscalInvoice {
  id          String    @id @default(cuid())
  orgId       String
  branchId    String
  orderId     String    @unique
  status      String    @default("PENDING") // PENDING | SENT | FAILED
  efirsTin    String?
  deviceCode  String?
  response    Json?
  attempts    Int       @default(0)
  lastTriedAt DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([orgId, status])
  @@index([status, lastTriedAt])
  @@map("fiscal_invoices")
}

// ===== Audit & Compliance =====

model AuditEvent {
  id         String   @id @default(cuid())
  branchId   String
  userId     String?
  action     String // e.g., "order.created", "order.voided", "payment.completed"
  resource   String // table name
  resourceId String? // record ID
  before     Json?
  after      Json?
  metadata   Json?
  createdAt  DateTime @default(now())

  branch Branch @relation(fields: [branchId], references: [id], onDelete: Cascade)
  user   User?  @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@index([branchId, createdAt])
  @@index([userId])
  @@index([action])
  @@map("audit_events")
}

model AnomalyEvent {
  id         String   @id @default(cuid())
  orgId      String
  branchId   String?
  userId     String?
  orderId    String?
  type       String // NO_DRINKS | LATE_VOID | HEAVY_DISCOUNT | VOID_SPIKE
  severity   String   @default("INFO") // INFO | WARN | CRITICAL
  details    Json?
  occurredAt DateTime @default(now())

  org    Org     @relation(fields: [orgId], references: [id], onDelete: Cascade)
  branch Branch? @relation(fields: [branchId], references: [id], onDelete: Cascade)
  user   User?   @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@index([orgId, occurredAt])
  @@index([branchId, type])
  @@index([userId])
  @@map("anomaly_events")
}

model AlertChannel {
  id      String  @id @default(cuid())
  orgId   String
  type    String // EMAIL | SLACK
  target  String // email address or webhook URL
  enabled Boolean @default(true)

  org Org @relation(fields: [orgId], references: [id], onDelete: Cascade)

  @@index([orgId])
  @@map("alert_channels")
}

model ScheduledAlert {
  id        String    @id @default(cuid())
  orgId     String
  name      String
  cron      String
  rule      String // VOID_SPIKE | LATE_VOID | HEAVY_DISCOUNT | NO_DRINKS_RATE
  enabled   Boolean   @default(true)
  lastRunAt DateTime?

  org Org @relation(fields: [orgId], references: [id], onDelete: Cascade)

  @@index([orgId])
  @@map("scheduled_alerts")
}

model SupportSession {
  id          String   @id @default(cuid())
  orgId       String
  createdById String
  token       String   @unique
  expiresAt   DateTime
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())

  org       Org  @relation(fields: [orgId], references: [id], onDelete: Cascade)
  createdBy User @relation(fields: [createdById], references: [id], onDelete: Cascade)

  @@index([orgId])
  @@index([token])
  @@index([expiresAt])
  @@map("support_sessions")
}

model ApiKey {
  id         String    @id @default(cuid())
  orgId      String
  name       String
  keyHash    String    @unique
  scopes     String[]
  lastUsedAt DateTime?
  createdAt  DateTime  @default(now())

  org Org @relation(fields: [orgId], references: [id], onDelete: Cascade)

  @@index([orgId])
  @@map("api_keys")
}

// ===== Hardware Integrations =====

model SpoutDevice {
  id        String   @id @default(cuid())
  orgId     String
  branchId  String
  name      String
  vendor    String // POURSENSE | FLOWX | SANDBOX
  secret    String?
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  org           Org                @relation(fields: [orgId], references: [id], onDelete: Cascade)
  branch        Branch             @relation(fields: [branchId], references: [id], onDelete: Cascade)
  calibrations  SpoutCalibration[]
  events        SpoutEvent[]

  @@index([orgId])
  @@index([branchId])
  @@map("spout_devices")
}

model SpoutCalibration {
  id              String   @id @default(cuid())
  deviceId        String
  inventoryItemId String
  mlPerPulse      Decimal  @db.Decimal(8, 4)
  createdAt       DateTime @default(now())

  device        SpoutDevice   @relation(fields: [deviceId], references: [id], onDelete: Cascade)
  inventoryItem InventoryItem @relation(fields: [inventoryItemId], references: [id], onDelete: Cascade)

  @@unique([deviceId, inventoryItemId])
  @@index([deviceId])
  @@map("spout_calibrations")
}

model SpoutEvent {
  id         String   @id @default(cuid())
  orgId      String
  branchId   String
  deviceId   String
  itemId     String?
  pulses     Int
  ml         Decimal  @db.Decimal(10, 3)
  raw        Json?
  occurredAt DateTime
  ingestedAt DateTime @default(now())

  org    Org         @relation(fields: [orgId], references: [id], onDelete: Cascade)
  branch Branch      @relation(fields: [branchId], references: [id], onDelete: Cascade)
  device SpoutDevice @relation(fields: [deviceId], references: [id], onDelete: Cascade)

  @@index([occurredAt])
  @@index([deviceId])
  @@index([orgId, branchId])
  @@map("spout_events")
}

model OwnerDigest {
  id                 String    @id @default(cuid())
  orgId              String
  name               String
  cron               String // e.g., "0 8 * * *" for daily at 8am
  lastRunAt          DateTime?
  recipients         String[] // Array of email addresses
  sendOnShiftClose   Boolean   @default(false)
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt

  org Org @relation(fields: [orgId], references: [id], onDelete: Cascade)

  @@index([orgId])
  @@map("owner_digests")
}

// ===== Inventory & Purchasing =====

model Supplier {
  id           String   @id @default(cuid())
  orgId        String
  name         String
  contact      String?
  email        String?
  phone        String?
  leadTimeDays Int      @default(2)
  minOrderQty  Decimal? @db.Decimal(10, 3)
  packSize     Decimal? @db.Decimal(10, 3)
  isActive     Boolean  @default(true)
  metadata     Json?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  purchaseOrders PurchaseOrder[]

  @@index([orgId])
  @@map("suppliers")
}

model InventoryItem {
  id           String   @id @default(cuid())
  orgId        String
  sku          String?
  name         String
  unit         String // kg, ltr, pcs, etc.
  category     String?
  reorderLevel Decimal  @default(0) @db.Decimal(10, 3)
  reorderQty   Decimal  @default(0) @db.Decimal(10, 3)
  isActive     Boolean  @default(true)
  metadata     Json?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  stockBatches      StockBatch[]
  recipeIngredients RecipeIngredient[]
  wastageRecords    Wastage[]
  adjustments       Adjustment[]
  poItems           PurchaseOrderItem[]
  receiptLines      GoodsReceiptLine[]
  spoutCalibrations SpoutCalibration[]
  forecastProfiles  ForecastProfile[]
  forecastPoints    ForecastPoint[]

  @@unique([orgId, sku])
  @@index([orgId])
  @@map("inventory_items")
}

model StockBatch {
  id             String    @id @default(cuid())
  orgId          String
  branchId       String
  itemId         String
  batchNumber    String?
  receivedQty    Decimal   @db.Decimal(10, 3)
  remainingQty   Decimal   @db.Decimal(10, 3)
  unitCost       Decimal   @db.Decimal(10, 2)
  expiryDate     DateTime?
  receivedAt     DateTime  @default(now())
  goodsReceiptId String?
  metadata       Json?

  branch       Branch        @relation(fields: [branchId], references: [id], onDelete: Cascade)
  item         InventoryItem @relation(fields: [itemId], references: [id], onDelete: Restrict)
  goodsReceipt GoodsReceipt? @relation(fields: [goodsReceiptId], references: [id], onDelete: SetNull)

  @@index([orgId, itemId])
  @@index([branchId, receivedAt])
  @@map("stock_batches")
}

model PurchaseOrder {
  id          String    @id @default(cuid())
  orgId       String
  branchId    String
  supplierId  String
  poNumber    String
  status      String    @default("draft") // draft, placed, received, cancelled
  totalAmount Decimal   @default(0) @db.Decimal(12, 2)
  placedAt    DateTime?
  metadata    Json?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  branch        Branch              @relation(fields: [branchId], references: [id], onDelete: Cascade)
  supplier      Supplier            @relation(fields: [supplierId], references: [id], onDelete: Restrict)
  items         PurchaseOrderItem[]
  goodsReceipts GoodsReceipt[]

  @@unique([orgId, poNumber])
  @@index([orgId, branchId])
  @@map("purchase_orders")
}

model PurchaseOrderItem {
  id        String   @id @default(cuid())
  poId      String
  itemId    String
  qty       Decimal  @db.Decimal(10, 3)
  unitCost  Decimal  @db.Decimal(10, 2)
  subtotal  Decimal  @db.Decimal(12, 2)
  createdAt DateTime @default(now())

  po   PurchaseOrder @relation(fields: [poId], references: [id], onDelete: Cascade)
  item InventoryItem @relation(fields: [itemId], references: [id], onDelete: Restrict)

  @@map("purchase_order_items")
}

model ProcurementJob {
  id           String                 @id @default(cuid())
  orgId        String
  createdById  String
  period       String?                @db.VarChar(7) // YYYY-MM
  strategy     ProcurementStrategy
  draftPoCount Int                    @default(0)
  status       ProcurementJobStatus   @default(DRAFT)
  createdAt    DateTime               @default(now())
  updatedAt    DateTime               @updatedAt

  createdBy User @relation(fields: [createdById], references: [id], onDelete: Restrict)

  @@index([orgId])
  @@index([orgId, status])
  @@map("procurement_jobs")
}

model Promotion {
  id               String    @id @default(cuid())
  orgId            String
  name             String
  code             String?   // Optional coupon code
  active           Boolean   @default(false)
  startsAt         DateTime?
  endsAt           DateTime?
  scope            Json?     // {branches: [...], categories: [...], items: [...]}
  daypart          Json?     // {days: [1..7], start: "HH:mm", end: "HH:mm"}
  priority         Int       @default(100)
  exclusive        Boolean   @default(false)
  requiresApproval Boolean   @default(true)
  approvedById     String?
  approvedAt       DateTime?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt

  approvedBy User?             @relation("PromotionApprovals", fields: [approvedById], references: [id], onDelete: SetNull)
  effects    PromotionEffect[]

  @@index([orgId])
  @@index([orgId, active])
  @@index([code])
  @@map("promotions")
}

model PromotionEffect {
  id          String              @id @default(cuid())
  promotionId String
  type        PromotionEffectType
  value       Decimal?            @db.Decimal(10, 2) // Percentage or fixed amount
  meta        Json?               // Additional config (bundle items, etc.)
  createdAt   DateTime            @default(now())

  promotion Promotion @relation(fields: [promotionId], references: [id], onDelete: Cascade)

  @@map("promotion_effects")
}

model GoodsReceipt {
  id         String   @id @default(cuid())
  orgId      String
  branchId   String
  poId       String?
  grNumber   String
  receivedAt DateTime @default(now())
  receivedBy String?
  metadata   Json?
  createdAt  DateTime @default(now())

  branch       Branch             @relation(fields: [branchId], references: [id], onDelete: Cascade)
  po           PurchaseOrder?     @relation(fields: [poId], references: [id], onDelete: SetNull)
  lines        GoodsReceiptLine[]
  stockBatches StockBatch[]

  @@unique([orgId, grNumber])
  @@index([orgId, branchId])
  @@map("goods_receipts")
}

model GoodsReceiptLine {
  id          String    @id @default(cuid())
  grId        String
  itemId      String
  qtyReceived Decimal   @db.Decimal(10, 3)
  unitCost    Decimal   @db.Decimal(10, 2)
  batchNumber String?
  expiryDate  DateTime?
  createdAt   DateTime  @default(now())

  gr   GoodsReceipt  @relation(fields: [grId], references: [id], onDelete: Cascade)
  item InventoryItem @relation(fields: [itemId], references: [id], onDelete: Restrict)

  @@map("goods_receipt_lines")
}

model RecipeIngredient {
  id               String   @id @default(cuid())
  menuItemId       String
  itemId           String
  qtyPerUnit       Decimal  @db.Decimal(10, 3) // qty of ingredient per menu item
  wastePct         Decimal  @default(0) @db.Decimal(5, 2)
  modifierOptionId String?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  menuItem       MenuItem        @relation(fields: [menuItemId], references: [id], onDelete: Cascade)
  item           InventoryItem   @relation(fields: [itemId], references: [id], onDelete: Restrict)
  modifierOption ModifierOption? @relation(fields: [modifierOptionId], references: [id], onDelete: SetNull)

  @@index([menuItemId])
  @@index([itemId])
  @@map("recipe_ingredients")
}

model Wastage {
  id         String   @id @default(cuid())
  orgId      String
  branchId   String
  itemId     String
  qty        Decimal  @db.Decimal(10, 3)
  reason     String?
  reportedBy String?
  metadata   Json?
  createdAt  DateTime @default(now())

  branch Branch        @relation(fields: [branchId], references: [id], onDelete: Cascade)
  item   InventoryItem @relation(fields: [itemId], references: [id], onDelete: Restrict)

  @@index([orgId, branchId])
  @@index([itemId])
  @@map("wastage")
}

model Adjustment {
  id         String   @id @default(cuid())
  orgId      String
  branchId   String
  itemId     String
  deltaQty   Decimal  @db.Decimal(10, 3) // Positive = add, Negative = remove
  reason     String
  adjustedBy String
  metadata   Json?
  createdAt  DateTime @default(now())

  branch Branch        @relation(fields: [branchId], references: [id], onDelete: Cascade)
  item   InventoryItem @relation(fields: [itemId], references: [id], onDelete: Restrict)

  @@index([orgId, branchId])
  @@index([itemId])
  @@map("adjustments")
}

// ===== E24: Subscriptions & Dev Portal =====

model DevAdmin {
  id        String   @id @default(cuid())
  email     String   @unique
  isSuper   Boolean  @default(false)
  createdAt DateTime @default(now())

  @@map("dev_admins")
}

model SubscriptionPlan {
  id       String  @id @default(cuid())
  code     String  @unique
  name     String
  priceUGX Decimal @db.Decimal(10, 2)
  features Json
  isActive Boolean @default(true)

  subscriptions OrgSubscription[]

  @@map("subscription_plans")
}

model OrgSubscription {
  id            String             @id @default(cuid())
  orgId         String
  planId        String
  status        SubscriptionStatus @default(ACTIVE)
  nextRenewalAt DateTime
  graceUntil    DateTime?
  createdAt     DateTime           @default(now())
  updatedAt     DateTime           @updatedAt

  org  Org              @relation(fields: [orgId], references: [id], onDelete: Cascade)
  plan SubscriptionPlan @relation(fields: [planId], references: [id], onDelete: Restrict)

  @@unique([orgId])
  @@index([status, nextRenewalAt])
  @@map("org_subscriptions")
}

model SubscriptionEvent {
  id    String                  @id @default(cuid())
  orgId String
  type  SubscriptionEventType
  meta  Json
  at    DateTime                @default(now())

  @@index([orgId, at])
  @@map("subscription_events")
}

// ===== E22: Franchise Models =====

enum ForecastMethod {
  MA7
  MA14
  MA30
}

model BranchBudget {
  id            String   @id @default(cuid())
  orgId         String
  branchId      String
  period        String   @db.VarChar(7) // YYYY-MM
  revenueTarget Decimal  @db.Decimal(12, 2)
  cogsTarget    Decimal  @db.Decimal(12, 2)
  expenseTarget Decimal  @db.Decimal(12, 2)
  notes         String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  org    Org    @relation(fields: [orgId], references: [id], onDelete: Cascade)
  branch Branch @relation(fields: [branchId], references: [id], onDelete: Cascade)

  @@unique([orgId, branchId, period])
  @@index([orgId, period])
  @@map("branch_budgets")
}

model ForecastProfile {
  id                String         @id @default(cuid())
  orgId             String
  branchId          String?
  itemId            String?
  method            ForecastMethod @default(MA14)
  weekendUpliftPct  Decimal        @db.Decimal(5, 2) @default(0)
  monthEndUpliftPct Decimal        @db.Decimal(5, 2) @default(0)
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt

  org    Org            @relation(fields: [orgId], references: [id], onDelete: Cascade)
  branch Branch?        @relation(fields: [branchId], references: [id], onDelete: Cascade)
  item   InventoryItem? @relation(fields: [itemId], references: [id], onDelete: Cascade)

  @@index([orgId, branchId])
  @@index([orgId, itemId])
  @@map("forecast_profiles")
}

model ForecastPoint {
  id           String   @id @default(cuid())
  orgId        String
  branchId     String
  itemId       String
  date         DateTime @db.Date
  predictedQty Decimal  @db.Decimal(10, 2)
  createdAt    DateTime @default(now())

  org    Org           @relation(fields: [orgId], references: [id], onDelete: Cascade)
  branch Branch        @relation(fields: [branchId], references: [id], onDelete: Cascade)
  item   InventoryItem @relation(fields: [itemId], references: [id], onDelete: Cascade)

  @@unique([orgId, branchId, itemId, date])
  @@index([orgId, date])
  @@map("forecast_points")
}

model FranchiseRank {
  id       String   @id @default(cuid())
  orgId    String
  period   String   @db.VarChar(7) // YYYY-MM
  branchId String
  score    Decimal  @db.Decimal(10, 2)
  rank     Int
  meta     Json
  createdAt DateTime @default(now())

  org    Org    @relation(fields: [orgId], references: [id], onDelete: Cascade)
  branch Branch @relation(fields: [branchId], references: [id], onDelete: Cascade)

  @@unique([orgId, period, branchId])
  @@index([orgId, period, rank])
  @@map("franchise_ranks")
}

// ===== Accounting Core (E40-s1) =====

model Account {
  id        String      @id @default(cuid())
  orgId     String
  code      String      // Unique within org (e.g., "1000", "4000")
  name      String      // e.g., "Cash", "Sales Revenue"
  type      AccountType
  isActive  Boolean     @default(true)
  parentId  String?     // For account hierarchy
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  parent       Account?      @relation("AccountHierarchy", fields: [parentId], references: [id], onDelete: SetNull)
  children     Account[]     @relation("AccountHierarchy")
  journalLines JournalLine[]

  @@unique([orgId, code])
  @@index([orgId, type])
  @@map("accounts")
}

model JournalEntry {
  id         String   @id @default(cuid())
  orgId      String
  date       DateTime @default(now())
  memo       String?
  source     String?  // e.g., "POS_SALE", "REFUND", "CASH_MOVEMENT", "VENDOR_PAYMENT"
  sourceId   String?  // Reference to source entity ID
  postedById String?
  createdAt  DateTime @default(now())

  lines JournalLine[]

  @@index([orgId, date])
  @@index([source, sourceId])
  @@map("journal_entries")
}

model JournalLine {
  id        String   @id @default(cuid())
  entryId   String
  accountId String
  branchId  String?
  debit     Decimal  @default(0) @db.Decimal(12, 2)
  credit    Decimal  @default(0) @db.Decimal(12, 2)
  meta      Json?    // Additional context
  createdAt DateTime @default(now())

  entry   JournalEntry @relation(fields: [entryId], references: [id], onDelete: Cascade)
  account Account      @relation(fields: [accountId], references: [id], onDelete: Restrict)

  @@index([entryId])
  @@index([accountId])
  @@map("journal_lines")
}

model Vendor {
  id            String        @id @default(cuid())
  orgId         String
  name          String
  email         String?
  phone         String?
  defaultTerms  PaymentTerms? // Default payment terms
  metadata      Json?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  bills    VendorBill[]
  payments VendorPayment[]

  @@index([orgId])
  @@map("vendors")
}

model VendorBill {
  id        String     @id @default(cuid())
  orgId     String
  vendorId  String
  number    String?    // Vendor's bill number
  billDate  DateTime   @default(now())
  dueDate   DateTime
  subtotal  Decimal    @db.Decimal(12, 2)
  tax       Decimal    @default(0) @db.Decimal(12, 2)
  total     Decimal    @db.Decimal(12, 2)
  status    BillStatus @default(DRAFT)
  memo      String?
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  vendor   Vendor          @relation(fields: [vendorId], references: [id], onDelete: Restrict)
  payments VendorPayment[]

  @@index([orgId, status])
  @@index([vendorId])
  @@index([dueDate])
  @@map("vendor_bills")
}

model VendorPayment {
  id        String   @id @default(cuid())
  orgId     String
  vendorId  String
  billId    String?  // Optional link to specific bill
  amount    Decimal  @db.Decimal(12, 2)
  paidAt    DateTime @default(now())
  method    String   // CASH, CARD, MOMO, BANK
  ref       String?  // Payment reference number
  metadata  Json?
  createdAt DateTime @default(now())

  vendor Vendor      @relation(fields: [vendorId], references: [id], onDelete: Restrict)
  bill   VendorBill? @relation(fields: [billId], references: [id], onDelete: SetNull)

  @@index([orgId])
  @@index([vendorId])
  @@index([billId])
  @@map("vendor_payments")
}

model CustomerAccount {
  id          String   @id @default(cuid())
  orgId       String
  name        String
  email       String?
  phone       String?
  creditLimit Decimal? @db.Decimal(12, 2)
  metadata    Json?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  invoices CustomerInvoice[]

  @@index([orgId])
  @@map("customer_accounts")
}

model CustomerInvoice {
  id          String        @id @default(cuid())
  orgId       String
  customerId  String
  number      String?       // Invoice number
  invoiceDate DateTime      @default(now())
  dueDate     DateTime
  subtotal    Decimal       @db.Decimal(12, 2)
  tax         Decimal       @default(0) @db.Decimal(12, 2)
  total       Decimal       @db.Decimal(12, 2)
  status      InvoiceStatus @default(OPEN)
  metadata    Json?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  customer CustomerAccount @relation(fields: [customerId], references: [id], onDelete: Restrict)

  @@index([orgId, status])
  @@index([customerId])
  @@index([dueDate])
  @@map("customer_invoices")
}

model ReminderSchedule {
  id        String          @id @default(cuid())
  orgId     String
  type      ReminderType
  targetId  String?         // Vendor ID for VENDOR_BILL, null for UTILITY
  channel   ReminderChannel
  whenDays  Int             // Days before due date
  isActive  Boolean         @default(true)
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt

  @@index([orgId, isActive])
  @@map("reminder_schedules")
}

// ===== E39-s1: Multi-currency & Tax Matrix =====

model Currency {
  code     String @id // ISO 4217: "UGX", "USD", "EUR"
  name     String // "Ugandan Shilling", "US Dollar"
  symbol   String // "USh", "$", "€"
  decimals Int    @default(0) // 0 for UGX, 2 for USD

  baseRates  ExchangeRate[] @relation("BaseCurrency")
  quoteRates ExchangeRate[] @relation("QuoteCurrency")

  @@map("currencies")
}

model ExchangeRate {
  id        String   @id @default(cuid())
  baseCode  String // "UGX"
  quoteCode String // "USD"
  rate      Decimal  @db.Decimal(18, 6) // 3700.000000 UGX per 1 USD
  asOf      DateTime @default(now())
  source    String? // "MANUAL", "BOU", "XE"
  createdAt DateTime @default(now())

  base  Currency @relation("BaseCurrency", fields: [baseCode], references: [code], onDelete: Cascade)
  quote Currency @relation("QuoteCurrency", fields: [quoteCode], references: [code], onDelete: Cascade)

  @@unique([baseCode, quoteCode, asOf])
  @@index([baseCode, quoteCode])
  @@map("exchange_rates")
}

// ===== E42-s1: Public Bookings Portal =====

model Event {
  id                 String   @id @default(cuid())
  orgId              String
  branchId           String
  slug               String   @unique
  title              String
  description        String?
  startsAt           DateTime
  endsAt             DateTime
  isPublished        Boolean  @default(false)
  floorPlanSnapshot  Json? // Snapshot of floor plan for historical reference
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  tables   EventTable[]
  bookings EventBooking[]

  @@index([orgId, branchId])
  @@index([slug])
  @@index([isPublished, startsAt])
  @@map("events")
}

model EventTable {
  id           String  @id @default(cuid())
  eventId      String
  tableId      String? // Optional link to actual floor plan table
  label        String // "VIP Table 1", "Rooftop A"
  capacity     Int
  price        Decimal @db.Decimal(12, 2) // Full table price
  minSpend     Decimal @db.Decimal(12, 2) // Minimum spend requirement
  deposit      Decimal @db.Decimal(12, 2) // Upfront deposit required
  allowPartial Boolean @default(true) // Allow partial bookings
  isActive     Boolean @default(true)

  event    Event          @relation(fields: [eventId], references: [id], onDelete: Cascade)
  bookings EventBooking[]

  @@index([eventId, isActive])
  @@map("event_tables")
}

model EventBooking {
  id               String             @id @default(cuid())
  eventId          String
  eventTableId     String
  name             String
  phone            String
  email            String?
  status           EventBookingStatus @default(HELD)
  depositIntentId  String? // PaymentIntent ID for deposit
  depositCaptured  Boolean            @default(false)
  creditTotal      Decimal            @default(0) @db.Decimal(12, 2) // Total credit eligible after deposit
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  metadata         Json? // Additional booking details

  event       Event           @relation(fields: [eventId], references: [id], onDelete: Cascade)
  eventTable  EventTable      @relation(fields: [eventTableId], references: [id], onDelete: Cascade)
  credits     PrepaidCredit[]

  @@index([eventId, status])
  @@index([eventTableId])
  @@index([phone])
  @@map("event_bookings")
}

model PrepaidCredit {
  id               String    @id @default(cuid())
  orgId            String
  branchId         String
  eventBookingId   String? // Link to event booking if applicable
  tableId          String? // Link to actual table when applied
  amount           Decimal   @db.Decimal(12, 2) // Total credit amount
  consumed         Decimal   @default(0) @db.Decimal(12, 2) // Amount already used
  expiresAt        DateTime
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt

  eventBooking EventBooking? @relation(fields: [eventBookingId], references: [id], onDelete: SetNull)

  @@index([orgId, branchId, expiresAt])
  @@index([eventBookingId])
  @@index([tableId])
  @@map("prepaid_credits")
}

// ===== E43-s1: Workforce Management =====

model LeavePolicy {
  id                     String   @id @default(cuid())
  orgId                  String
  name                   String
  accrualHoursPerMonth   Decimal  @default(0) @db.Decimal(10, 2)
  maxCarryOverHours      Decimal  @default(0) @db.Decimal(10, 2)
  maxUninformedAbsences  Int      @default(0)
  createdAt              DateTime @default(now())
  updatedAt              DateTime @updatedAt

  @@index([orgId])
  @@map("leave_policies")
}

model LeaveRequest {
  id           String             @id @default(cuid())
  orgId        String
  userId       String
  type         LeaveType
  startDate    DateTime
  endDate      DateTime
  status       LeaveRequestStatus @default(PENDING)
  approvedById String?
  approvedAt   DateTime?
  reason       String?
  createdAt    DateTime           @default(now())
  updatedAt    DateTime           @updatedAt

  user       User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  approvedBy User? @relation("ApprovedLeave", fields: [approvedById], references: [id], onDelete: SetNull)

  @@index([orgId, userId, status])
  @@index([startDate, endDate])
  @@map("leave_requests")
}

model DutyShift {
  id           String   @id @default(cuid())
  orgId        String
  branchId     String
  userId       String
  startsAt     DateTime
  endsAt       DateTime
  roleSlug     String
  assignedById String?
  notes        String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user       User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  assignedBy User?       @relation("AssignedShifts", fields: [assignedById], references: [id], onDelete: SetNull)
  swaps      ShiftSwap[]

  @@index([orgId, branchId, startsAt])
  @@index([userId, startsAt])
  @@map("duty_shifts")
}

model ShiftSwap {
  id           String          @id @default(cuid())
  orgId        String
  fromUserId   String
  toUserId     String
  dutyShiftId  String
  status       ShiftSwapStatus @default(PENDING)
  approvedById String?
  decidedAt    DateTime?
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt

  fromUser   User       @relation("SwapFrom", fields: [fromUserId], references: [id], onDelete: Cascade)
  toUser     User       @relation("SwapTo", fields: [toUserId], references: [id], onDelete: Cascade)
  dutyShift  DutyShift  @relation(fields: [dutyShiftId], references: [id], onDelete: Cascade)
  approvedBy User?      @relation("ApprovedSwaps", fields: [approvedById], references: [id], onDelete: SetNull)

  @@index([orgId, status])
  @@index([dutyShiftId])
  @@map("shift_swaps")
}

model TimeEntry {
  id               String          @id @default(cuid())
  orgId            String
  branchId         String
  userId           String
  clockInAt        DateTime
  clockOutAt       DateTime?
  method           TimeClockMethod
  approved         Boolean         @default(false)
  approvedById     String?
  overtimeMinutes  Int             @default(0)
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt

  user       User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  approvedBy User? @relation("ApprovedTimeEntries", fields: [approvedById], references: [id], onDelete: SetNull)

  @@index([orgId, branchId, clockInAt])
  @@index([userId, clockInAt])
  @@map("time_entries")
}
